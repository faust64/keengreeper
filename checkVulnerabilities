#!/bin/sh

basePath=`dirname $0`
export PATH="$basePath/utils:$PATH"

if test -s /etc/keengreeper.conf; then
    . /etc/keengreeper.conf
fi
if test -z "$LOGDIR"; then
    export LOGDIR=`pwd`/logs
fi
if test -z "$TMPDIR"; then
    export TMPDIR=`pwd`/tmp
fi
if test -z "$WORKDIR"; then
    export WORKDIR=/home/`id -un`/git
fi
if test -z "$DBDIR"; then
    export DBDIR=$WORKDIR
fi
if test -z "$CACHETTL"; then
    export CACHETTL=3600
fi
test -d $LOGDIR || mkdir -p $LOGDIR
test -d $TMPDIR || mkdir -p $TMPDIR
test -d $DBDIR  || mkdir -p $DBDIR
if ! test -d $DBDIR; then
    echo "CRITICAL: $DBDIR does not exist" >&2
    exit 1
elif ! test -s $DBDIR/npmjs-cache; then
    echo "CRITICAL: npmjs-cache is absent" >&2
    exit 1
elif ! test -s $DBDIR/snyk-cache; then
    echo "CRITICAL: snyk-cache is absent" >&2
    exit 1
elif ! test -s $DBDIR/nodejs-update-db; then
    cat <<EOF >&2
CRITICAL: nodejs-update-db absent or empty
	  use $basePath/configure to create an empty dataset, and configure
	  which repositories our job should be working with.
EOF
elif ! nodeDbListCache >/dev/null 2>&1; then
    echo "CRITICAL: failed listing npmjs cache" >&2
    exit 1
elif ! snykDbListCache >/dev/null 2>&1; then
    echo "CRITICAL: failed listing snyk cache" >&2
    exit 1
fi
TMPFILE=$TMPDIR/$1.$$

SNYK_THROTTLE=0
for repository in `listRepository`
do
    if test "$1"; then
	if ! echo $repository | grep -E "$1" >/dev/null; then
	    test "$DEBUG" && echo "skipping $repository - does not match pattern"
	    continue
	fi
    fi
    if ! listDependencies $repository >/dev/null 2>&1; then
	echo "skipping $repository - failed listing dependencies" >&2
	continue
    fi
    >$TMPFILE
    echo "processing $repository dependencies" >&2
    listDependencies $repository | while read dependency version
	do
	    skipreason=
	    if echo $version | grep -E '(((http(s|)|ssh|file):)|/)' >/dev/null; then
		skipreason="non-npm dependency"
	    elif ! nodeDbGetCache $dependency >/dev/null 2>&1; then
		if ! getVersionFromNpmjs $dependency >/dev/null 2>&1; then
		    skipreason="failed getting last revision from npmjs.com"
		elif ! nodeDbAddCache $dependency >/dev/null 2>&1; then
		    skipreason="failed updating npmjs cache"
		fi
	    fi
	    if test "$skipreason"; then
		test "$DEBUG" && echo "skipping $repository::$dependency - $skipreason" >&2
		continue
	    elif test "$version" = latest; then
		if resolveVersion $repository $dependency >/dev/null 2>/dev/null; then
		    localVersion=`resolveVersion $repository $dependency`
		else
		    localVersion=`nodeDbGetCache $dependency 2>/dev/null`
		fi
	    elif echo "$version" | grep -E '[~xX^]' >/dev/null; then
		if resolveVersion $repository $dependency >/dev/null 2>/dev/null; then
		    localVersion=`resolveVersion $repository $dependency`
		else
		    localVersion=`echo $version | sed -e 's|^[~^]||' -e 's|[xX]|0|g'`
		fi
	    else
		localVersion=$version
	    fi
	    test "$DEBUG" && echo "found $dependency $version -> $localVersion" >&2
	    echo "$dependency $localVersion"
	done \
    | sort -u | while read dependency version
	do
	    if ! snykDbGetCache $dependency $version >/dev/null 2>&1; then
		echo "WARNING: snyk cache missing $dependency@$version" >&2
		continue
	    elif snykDbGetCache $dependency $version 2>&1 | grep 'has no known vulnerability' >/dev/null; then
		continue
	    else
		echo "$dependency@$version known to be vulnerable:"
		snykDbGetCache $dependency $version 2>/dev/null
		echo "find more at https://snyk.io/test/npm/$dependency@$version"
	    fi >>$TMPFILE
	done
    if test -s $TMPFILE; then
	if cmp $TMPFILE $WORKDIR/$repository.known-vulnerabilities >/dev/null 2>&1; then
	    echo "NOTICE: no new vulnerability for $repository"
	else
	    echo "NOTICE: $repository is subject to new vulnerabilities"
	    if test "$SLACK_HOOK_URL"; then
		ulist=`awk '/find more at/{print $4}' $TMPFILE`
		notifySlack "WARNING: $repository subject to Snyk security advisories, see $ulist"
	    fi
	    if test "$MAIL_RCPT"; then
		cat $TMPFILE | mail -s "[WARNING] $repository known to be vulnerable"
	    fi
	    if ! mv $TMPFILE $WORKDIR/$repository.known-vulnerabilities; then
		echo "CRITICAL: failed archiving $repository known vulnerabilities" >&2
	    fi
	fi
    elif test -s $WORKDIR/$repository.known-vulnerabilities; then
	rm -f $WORKDIR/$repository.known-vulnerabilities
	echo "NOTICE: purged $repository security advisory"
	if test "$SLACK_HOOK_URL"; then
	    notifySlack "REPORT: $repository is no longer subject to Snyk security advisories"
	fi
	if test "$MAIL_RCPT"; then
	    echo "$repository no is no longer subject to Snyk security issues" \
		| mail -s "[REPORT] $repository no longer vulnerable"
	fi
    fi
done

rm -f $TMPFILE
echo done

exit 0
