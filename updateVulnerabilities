#!/bin/sh

basePath=`dirname $0`
export PATH="$basePath/utils:$PATH"

if test -s /etc/keengreeper.conf; then
    . /etc/keengreeper.conf
fi
if test -z "$LOGDIR"; then
    export LOGDIR=`pwd`/logs
fi
if test -z "$TMPDIR"; then
    export TMPDIR=`pwd`/tmp
fi
if test -z "$DBDIR"; then
    export DBDIR=$WORKDIR
fi
if test -z "$CACHETTL"; then
    export CACHETTL=3600
fi
test -d $LOGDIR || mkdir -p $LOGDIR
test -d $TMPDIR || mkdir -p $TMPDIR
test -d $DBDIR  || mkdir -p $DBDIR
if ! test -d $DBDIR; then
    echo "CRITICAL: $DBDIR does not exist" >&2
    exit 1
elif ! test -s $DBDIR/npmjs-cache; then
    echo "CRITICAL: npmjs-cache is absent" >&2
    exit 1
elif ! nodeDbListCache >/dev/null 2>&1; then
    echo "CRITICAL: failed listing npmjs cache" >&2
    exit 1
fi

SNYK_THROTTLE=0
for repository in `listRepository`
do
    if ! listDependencies $repository >/dev/null 2>&1; then
	echo "skipping $repository - failed listing dependencies" >&2
	continue
    fi
    echo "processing $repository dependencies" >&2
    listDependencies $repository | while read dependency version
	do
	    skipreason=
	    if echo $version | grep -E '(((http(s|)|ssh|file):)|/)' >/dev/null; then
		skipreason="non-npm dependency"
	    elif ! nodeDbGetCache $dependency >/dev/null 2>&1; then
		if ! getVersionFromNpmjs $dependency >/dev/null 2>&1; then
		    skipreason="failed getting last revision from npmjs.com"
		elif ! nodeDbAddCache $dependency >/dev/null 2>&1; then
		    skipreason="failed updating npmjs cache"
		fi
	    fi
	    if test "$skipreason"; then
		test "$DEBUG" && echo "skipping $repository::$dependency - $skipreason" >&2
		continue
	    elif test "$version" = latest; then
		if resolveVersion $repository $dependency >/dev/null 2>/dev/null; then
		    localVersion=`resolveVersion $repository $dependency`
		else
		    localVersion=`nodeDbGetCache $dependency 2>/dev/null`
		fi
	    elif echo "$version" | grep -E '[~xX^]' >/dev/null; then
		if resolveVersion $repository $dependency >/dev/null 2>/dev/null; then
		    localVersion=`resolveVersion $repository $dependency`
		else
		    localVersion=`echo $version | sed -e 's|^[~^]||' -e 's|[xX]|0|g'`
		fi
	    else
		localVersion=$version
	    fi
	    test "$DEBUG" && echo "found $dependency $version -> $localVersion" >&2
	    echo "$dependency $localVersion"
	done
done | sort -u \
    | while read package version
	do
	    if ! snykDbGetCache $package $version >/dev/null 2>&1; then
		if ! snykDbAddCache $package $version >/dev/null 2>&1; then
		    echo "WARNING: failed querying snyk for $package/$version" >&2
		else
		    echo "NOTICE: added $package/$version to local cache"
		fi
		SNYK_THROTTLE=`expr $SNYK_THROTTLE`
	    else
		echo "NOTICE: $package/$version already cached"
	    fi
	done

snykDbListCache | grep ' last checked on ' | sort -u \
    | sed 's|^\([^@]*\)@\([^ ]*\) .*|\1 \2|' \
    | while read package version
	do
	    if ! nodeDbGetCache $package >/dev/null 2>&1; then
		if ! nodeDbListIgnore "^$package$" >/dev/null 2>&1; then
		    if ! snykDbEvictCache $package $version >/dev/null 2>&1; then
			echo "WARNING: failed evicting $package/$version from local cache"
		    else
			echo "NOTICE: evicted $package/$version from local cache"
		    fi
		fi
	    fi
	done

echo done

exit 0
