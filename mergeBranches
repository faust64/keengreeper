#!/bin/sh

basePath=`dirname $0`
export PATH="`pwd`/utils:$PATH"

if test -s /etc/keengreeper.conf; then
    . /etc/keengreeper.conf
fi
if test -z "$LOGDIR"; then
    export LOGDIR=`pwd`/logs
fi
if test -z "$TMPDIR"; then
    export TMPDIR=`pwd`/tmp
fi
if test -z "$WORKDIR"; then
    export WORKDIR=/home/`id -un`/git
fi
if test -z "$DBDIR"; then
    export DBDIR=$WORKDIR
fi
if test -z "$CACHETTL"; then
    export CACHETTL=3600
fi
test -d $LOGDIR || mkdir -p $LOGDIR
test -d $TMPDIR || mkdir -p $TMPDIR
test -d $DBDIR  || mkdir -p $DBDIR
if ! test -d $DBDIR; then
    echo "CRITICAL: $DBDIR does not exist" >&2
    exit 1
elif ! test -s $DBDIR/npmjs-cache; then
    echo "CRITICAL: npmjs-cache is absent" >&2
    exit 1
elif ! test -s $DBDIR/snyk-cache; then
    echo "CRITICAL: snyk-cache is absent" >&2
    exit 1
elif ! test -s $DBDIR/nodejs-update-db; then
    cat <<EOF >&2
CRITICAL: nodejs-update-db absent or empty
	  use $basePath/configure to create an empty dataset, and configure
	  which repositories our job should be working with.
EOF
elif ! nodeDbListCache >/dev/null 2>&1; then
    echo "CRITICAL: failed listing npmjs cache" >&2
    exit 1
fi

for repository in `listRepository`
do
    if test "$1"; then
	if ! echo $repository | grep -E "$1" >/dev/null; then
	    test "$DEBUG" && echo "skipping $repository - does not match pattern"
	    continue
	fi
    fi
    if ! hasCI $repository; then
	test "$DEBUG" && echo "skipping $repository - does not have CircleCI or TravisCI configured"
	continue
    fi
    if test -s "$TMPDIR/$repository.lock"; then
	if ls /proc/`cat "$TMPDIR/$repository.lock"` >/dev/null 2>&1; then
	    echo "skipping $repository - lock file exists"
	    continue
	fi
	test "$DEBUG" && echo "orphan lock file exists, discarding"
    fi
    echo $$ >$TMPDIR/$repository.lock
    if ! cleanRepository $repository; then
	resetRepository $repository
    fi
    if setBranch $repository staging; then
	if ! updateRepository $repository; then
	    echo "skipping $repositroy - failed updating local copy"
	    rm -f $TMPDIR/$repository.lock
	    continue
	fi
	if ! getLastBranch $repository >/dev/null 2>&1; then
	    echo "done with $repository - nothing to merge"
	else
	    workWith=`getLastBranch $repository`
	    if queryCI $repository $workWith; then
		if mergeBranch $repository $workWith; then
		    echo "done merging $repository updates"
		fi
	    fi
	fi
    else
	echo "skipping $repository - failed switching to main working branch"
    fi
    rm -f $TMPDIR/$repository.lock
done
